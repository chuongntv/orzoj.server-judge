# This is the configuration file for orzoj-judge.
# Please read the comments and set your options.

# LogFile: thr file to save log
# better to use absolute path
LogFile "/var/log/orzoj-judge.log"

# PidFile: the file to store current process's pid
PidFile "/var/run/orzoj-judge.pid"

# LogMaxBytes: maximal bytes that a log file can contain
LogMaxBytes 1048576  # 1MB

# LogBackupCount: the number of old log files to save,
# by appending the extensions “.1”, “.2” etc.
LogBackupCount 5

# LogLevel: allows you to control the message logged to log file.
# only message with level higher or equal to LogLevel
# will be logged.
# LogLevel must be one of:
#   debug
#   info
#   warning
#   error
#   critical
#
LogLevel debug

# NetworkTimeout: the maximal time spent waiting message in communication
# between orzoj-server and orzoj-client, given in seconds
NetworkTimeout 30

# Note:
# the following three options are for SSL.
# Bilateral authentication is used, so it is necessary to
# provide CertificateFile and PrivateKeyFile even on orzoj-judge.
# 
# Certificate of both orzoj-server and orzoj-judge should be signed by
# the same CA.

# CertificateFile: SSL certificate file
CertificateFile /etc/orzoj/judge.cert

# PrivateKeyFile: SSL private key file
PrivateKeyFile /etc/orzoj/judge.key

#CAFile: SSL CA(certificate authority) certificate file
CAFile /etc/orzoj/ca.cert

# ServerAddr: orzoj-server address and port
# format: ServerAddr <address> <port>
ServerAddr 127.0.0.1 9351

# SetInfo: set system infomation to be sent to orzoj-server and
# displayed on orzoj-web
#
# format: SetInfo <name> <value0> <value1> ...
#
# values will be joined together by adding newlines (\n) between them
#
# by default, cpuinfo and meminfo are read from /proc/{cpuinfo,meminfo}
# if your system does not provide access to these two files, please
# set cpuinfo and meminfo manually
#
# SetInfo cpuinfo "orzoj CPU"
# SetInfo meminfo "orzoj RAM"
SetInfo description "another orzoj-judge" "compilers:" " gcc: x.x.x" " g++: x.x.x" \
	" java: x.x.x"

# JudgeId: the identifier (a string) of this judge
JudgeId "orzoj-judge-default"

# DataCache: problem data cache directory
# format: DataCache <directory path>
DataCache /home/orzoj/data

# VerifierCache: problem verifiers cache directory
# format: VerifierCache <directory path>
VerifierCache /home/orzoj/verifier

# SetUmask: set octal umask value
SetUmask 077

# AddLimiter: add a resource limiter
# format: AddLimiter <limiter name> <communication method> <full path to executable> <arg0> <arg1> ...
#
# <communication method> must be one of "socket" or "file"
# socket is not supported on Windows
#
# Python expressions can be used in arguments, in the following format:
# $expr or $(expr)
# the value of python expression should be str or list
# if it is str, the original expression will be replaced
# if it is list, it will be expanded to a list of arguments
#
# if you want to use dolor sign, you can use $('$')
#
# variables usable in expressions:
#   TARGET		--	the executor
#					(each argument of executor will be passed as an individual
#					argument to the limiter. e.g. If the executor is "java $SRC", then
#					the limiter will receive two arguments, "java" and "$SRC" respectively)
#   TIME		--	time limit, in milliseconds
#   MEMORY		--	memory limit, in kb
#   WORKDIR		--	working directory (if ChrootDir is set, it's relative to ChrootDir)
#   WORKDIR_ABS --  absolute working directory (relative to the current root directory, regardless of ChrootDir)
#   DATADIR		--	problem data directory
#   SOCKNAME	--	socket name for communication (Unix only)
#   FILENAME	--	file name for communication
#   CHROOT_DIR	--	the directory to chroot to (platform: Unix)
#   USER		--	the id of user as which to run TARGET
#   GROUP		--	the id of group as which to run TARGET
#
# you can set LogLevel to debug to see the actual commands executed
#
# you can use orzoj-limiter to generate allowed syscall list (Unix only)
#
# on Windows, CHROOT_DIR, USER and GROUP are not supported
#
AddLimiter lim-default socket /usr/bin/orzoj-limiter --socket $SOCKNAME --chroot $CHROOT_DIR \
	--time $TIME --hard-time "$(TIME + 5000)" --mem $MEMORY --chdir $WORKDIR --user $USER --group $GROUP \
	--nproc 1 --syscall /etc/orzoj/syscall.allowed --exec $TARGET

AddLimiter lim-java socket /usr/bin/orzoj-limiter --socket $SOCKNAME --time "$(TIME * 2)" --hard-time "$(TIME * 2 + 5000)" \
	--chdir $WORKDIR_ABS --user $USER --group $GROUP --syscall /etc/orzoj/syscall.allowed.java --exec $TARGET 


# compiler limiters is necessary because some bad code 
# might cause the compiler to run for a long time
#
# and maximal output length should be limited because
# some code can cause the compiler to produce large error infomation
AddLimiter lim-compiler socket /usr/bin/orzoj-limiter --socket $SOCKNAME \
	--mem 262144 --hard-time 30000 --stderr-max 65536 --exec $TARGET


# AddExecutor: add an executor, which is used to execute the compiler or target program
# format: AddExecutor <executor name> <limiter name> <executable path> <arg0> <arg1> ...
#
# in the args, use $SRC to represent the source file name without extension.
#
# Note: for compiler executors, this is the basic part of compilation arguments,
# while another part is stored in the problem configuration
#
# variables except TARGET in AddLimiter can also be used

# compiler executors:
AddExecutor cmp-gcc		lim-compiler	/usr/bin/gcc $SRC.c -o $SRC -static -lm
AddExecutor cmp-g++		lim-compiler	/usr/bin/g++ $SRC.cpp -o $SRC -static
AddExecutor cmp-fpc		lim-compiler	/usr/bin/fpc $SRC.pas -Xt
AddExecutor cmp-java	lim-compiler	/usr/bin/javac $SRC.java
# program executors:
AddExecutor exe-default	lim-default		$SRC
AddExecutor exe-java	lim-java		/usr/bin/java "$(\"-Xmx{0}k\".format(MEMORY))" $SRC

# Note:
# on Windows, you should add .exe to executable files.
# e.g.
#	gcc $SRC.c -o $SRC.exe
#
#	lim-default $SRC.exe

# AddLang: add a language
# format: AddLang <language> <source file extention> <executable file exetention> <compiler executor> <program executor> 
#
# <compiler executor> can be set to "None" if not needed
# <language> must match the language on the website
AddLang	gcc		.c		""	cmp-gcc		exe-default
AddLang g++		.cpp	""	cmp-g++		exe-default
AddLang	fpc		.pas	""	cmp-fpc		exe-default
AddLang	java	.java	""	cmp-java	exe-java
#AddLang binary	""		None	None	default


# ChrootDir: directory to chroot to (Unix only)
# it should be an absolute path
#
# Note: you can choose either to put neccessary libraries
# in correct structure in the directory or compile programs statically
ChrootDir /home/orzoj/chroot

# TempDir: temprory directory, also the working directory for program being judged
# it will be cleaned frequently
#
# Note: if ChrootDir is set, TempDir should be relative to ChrootDir,
# otherwise it should be an absolute path
TempDir tmp


# LockFile: The file to lock when judging a program. This option
# helps you ensure that system resource won't be overused when
# running multiple orzoj-judges on a single machine
# (Unix only)
#
# LockFile /var/lock/orzoj-judge.lock


# User and Group: the user (group) name (or #id) to execute programs
# being judged
#
# (Unix only)
User nobody
Group nobody

