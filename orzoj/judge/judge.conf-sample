# This is the configuration file for orzoj-server.
# Please read the comments and set your options.

# LogFile: thr file to save log
# better to use absolute path
LogFile "/var/log/orzoj-judge.log"

# PidFile: the file to store current process's pid
PidFile "/var/run/orzoj-judge.pid"

# LogMaxBytes: maximal bytes that a log file can contain
LogMaxBytes 1048576  # 1MB

# LogBackupCount: the number of old log files to save,
# by appending the extensions “.1”, “.2” etc.
LogBackupCount 5

# LogLevel: allows you to control the message logged to log file.
# only message with level higher or equal to LogLevel
# will be logged.
# LogLevel must be one of:
#   debug
#   info
#   warning
#   error
#   critical
#
LogLevel debug

# NetworkTimeout: the maximal time spent waiting message in communication
# between orzoj-server and orzoj-client, given in seconds
NetworkTimeout 2

# Note:
# the following three options are for SSL.
# Bilateral authentication is used, so it is necessary to
# provide CertificateFile and PrivateKeyFile even on orzoj-judge.
# 
# Certificate of both orzoj-server and orzoj-judge should be signed by
# the same CA.

# CertificateFile: SSL certificate file
CertificateFile /etc/orzoj/judge.cert

# PrivateKeyFile: SSL private key file
PrivateKeyFile /etc/orzoj/judge.key

#CAFile: SSL CA(certificate authority) certificate file
CAFile /etc/orzoj/ca.cert

# ServerAddr : orzoj-server address and port
# format: ServerAddr <address> <port>
ServerAddr 127.0.0.1 9351

# DataCache: problem data cache directory
# format: DataCache <directory path>
DataCache /home/orzoj/data

# AddLimiter: add a resource limiter
# format: AddLimiter <limiter name> <communication method> <full path to executable> <arg0> <arg1> ...
#
# <communication method> must be one of "socket" or "file"
# socket is not supported on Windows
#
# variables usable in arguments:
#   TARGET		--	the executor
#					(each argument of executor will be passed as an individual
#					argument to the limiter. e.g. If the executor is "java %s", then
#					the limiter will receive two arguments, "java" and "%s" respectively)
#   TIME		--	time limit, in milliseconds
#   MEMORY		--	memory limit, in kb
#   WORKDIR		--	working directory
#   DATADIR		--	problem data directory
#   SOCKNAME	--	socket name for communication (Unix only)
#   FILENAME	--	file name for communication
#   CHROOT_DIR	--	the directory to chroot to (platform: Unix)
#   USER		--	the id of user as which to run TARGET
#   GROUP		--	the id of group as which to run TARGET
#
# NOTES:
# variables can be included in a quoted part and evaluated as a Python expression
# all arguments including variables must begin with a dollar sign
#
# you can set LogLevel to debug to see the actual commands executed
#
# you can use orzoj-limiter to generate allowed syscall list (Unix only)
#
# on Windows, CHROOT_DIR, USER and GROUP are not supported
#
AddLimiter default socket /usr/bin/orzoj-limiter --socket $SOCKNAME --chroot $CHROOT_DIR \
	--time $TIME --hard-time "$TIME + 5000" --mem $MEMORY --chdir $WORKDIR --user $USER --group $GROUP \
	--nproc 1 --syscall /etc/orzoj/syscall.allowed --exec $TARGET

AddLimiter java socket /usr/bin/orzoj-limiter --socket $SOCKNAME --time "$TIME * 2" --hard-time "$TIME * 2 + 5000" \
	--chdir $WORKDIR --user $USER --group $GROUP --syscall /etc/orzoj/syscall.allowed.java --exec $TARGET 


# compiler limiter is necessary because some bad code 
# might cause the compiler to run for a long time
#
# Note:
#   only TARGET, TIME, SOCKNAME and FILENAME are available variables
#   here TIME is compilation time limit (defined in msg.py) in milliseconds
#
AddLimiter compiler socket /usr/bin/orzoj-limiter --socket $SOCKNAME --time $TIME --exec $TARGET


# AddCompiler: add a local compiler
# format: AddCompiler <compiler name> <limiter name> <full path to executable> <arg0> <arg1> ...
# in the args, use %s to represent the source file name without extension.
#
# note: this is the basic part of compilation arguments, while another part
# is stored in the problem configuration. DO NOT include optimization flags.
#
# usable variables:
#   TIME		--	time limit, in milliseconds
#   MEMORY		--	memory limit, in kb
#   DATADIR		--	problem data directory
#
AddCompiler gcc		compiler	/usr/bin/gcc %s.c -o %s -static -lm
AddCompiler g++		compiler	/usr/bin/g++ %s.cpp -o %s -static
AddCompiler fpc		compiler	/usr/bin/fpc %s.pas -Xt
AddCompiler java	compiler	/usr/bin/javac %s.java

# AddExecutor: add an executor
# format: AddExecutor <executor name> <executable path> <arg0> <arg1> ...
#
# variables in AddCompiler section can also be used
AddExecutor java	/usr/bin/java "$\"-Xmx{0}k\".format(MEMORY)" %s

# AddLang: add a language
# format: AddLang <language> <source file extention> <compiler name> <executor name> <limiter name>
#
# <compiler name> or <executor name> can be set to "None" if not needed
AddLang c++		cpp		g++		None	default
AddLang	c		c		gcc		None	default
AddLang	pascal	pas		fpc		None	default
AddLang	java	java	java	java	java
#AddLang binary	""		None	None	default


# ChrootDir: directory to chroot to (Unix only)
# it should be an absolute path
#
# note: you can choose either to put neccessary libraries
# in correct structure in the directory or compile programs statically
ChrootDir /home/orzoj/chroot

# TempDir: temprory directory, also the working directory for program being judged
# it will be cleaned frequently
#
# Note: if ChrootDir is set, TempDir should be relative to ChrootDir,
# otherwise it should be an absolute path
TempDir tmp


# LockFile: The file to lock when judging a program. This option
# helps you ensure that system resource won't be overused when
# running multiple orzoj-judges on a single machine
# (Unix only)
#
# LockFile /var/lock/orzoj-judge.lock


# User and Group: the user (group) name (or #id) to execute programs
# being judged
#
# (Unix only)
User nobody
Group nobody

